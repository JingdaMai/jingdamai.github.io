<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>WebSocket Streaming Between Vue.js and Flask-SocketIO</title>
      <link href="/2020/06/05/websocketstreamingbetweenvueandflasksocketio/"/>
      <url>/2020/06/05/websocketstreamingbetweenvueandflasksocketio/</url>
      
        <content type="html"><![CDATA[<h1 id="WebSocket-Streaming-Between-Vue-js-and-Flask-SocketIO"><a href="#WebSocket-Streaming-Between-Vue-js-and-Flask-SocketIO" class="headerlink" title="WebSocket Streaming Between Vue.js and Flask-SocketIO"></a>WebSocket Streaming Between Vue.js and Flask-SocketIO</h1><h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><p><img src="websocket_demo.gif" alt="websocket_demo"></p><h2 id="Vue-js-Setup"><a href="#Vue-js-Setup" class="headerlink" title="Vue.js Setup"></a>Vue.js Setup</h2><h3 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h3><p>The frontend job is to connect the WebSocket of backend and receive streaming from the backend.</p><h3 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h3><p>For this blog post, I use the following Vue CLI version:</p><pre><code>$ vue -V@vue/cli 4.2.3</code></pre><br><p>First create a Vue.js project by command line and keep pressing enter key to use all the default settings.</p><pre><code>$ vue create websocket-frontend</code></pre><br><p>Install the socket.io-client package to receive WebSocket streaming from backend</p><pre><code>$ cd websocket-frontend$ npm install socket.io-client</code></pre><br><p>After installing I got the version of the package when I am writing this post.</p><pre><code>+ socket.io-client@2.3.0</code></pre><h3 id="Template-Code"><a href="#Template-Code" class="headerlink" title="Template Code"></a>Template Code</h3><p>Use your favorite editor to enter the project (here I use Visual Studio Code).</p><pre><code>$ code .</code></pre><br><p>Delete some code in the template tag and  add an img tag to display the image using v-bind.</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span>      <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>      <span class="token attr-name">:src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span>      <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400px<span class="token punctuation">"</span></span>      <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300px<span class="token punctuation">"</span></span>      <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>x<span class="token punctuation">"</span></span>    <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Script-Code"><a href="#Script-Code" class="headerlink" title="Script Code"></a>Script Code</h3><p>Add the image variable into the data</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>     image<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Now we can get our hands into Websocket!</p><br><p>Import the ‘socket.io-client’ package</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">import</span> io <span class="token keyword">from</span> <span class="token string">'socket.io-client'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><p>Add an variable into the data property to store a socket object</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>     image<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>     socket<span class="token punctuation">:</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Considering that this is a page for live streaming, we want the component to connect to WebSocket when the user opens the page and disconnect when the user closes the page.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  <span class="token operator">...</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>To write our connectWebsocket function, we need to tell the WebSocket where to listen and what to listen to.</p><pre class="line-numbers language-javascript"><code class="language-javascript">  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">'/message'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/backend/socket.io'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Our socket will listen to the socket with the URI of “/message” and the path of “/backend/socket.io”. I think you might notice that here we define a path of ‘/backend/socket.io’. It doesn’t look like a real address at all because there is no domain or IP address. We will define the real address in the <strong>Proxy Configuration</strong> section.</p><br><p>Then we need to add an event for WebSocket to listen to and make it to do something. Here we will receive the base64 image string from backend and display it. More specifically, the frontend receives an object from backend via WebSocket and parses the base64 string is in the data property.</p><pre class="line-numbers language-javascript"><code class="language-javascript">  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">'/message'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/backend/socket.io'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">receiveMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token string">"data:image/jpg;base64,"</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Finally, we can complete the disconnectWebsocket function.</p><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here the frontend socket emits the event ‘disconnect’  to the backend and then disconnects itself.</p><h3 id="Proxy-Configuration"><a href="#Proxy-Configuration" class="headerlink" title="Proxy Configuration"></a>Proxy Configuration</h3><p>Create a vue.config.js file in the root of your project directory (For example here the directory is websocket-frontend) to make a proxy configuration.</p><pre><code>$ touch vue.config.js</code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'^/backend'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:5000/backend'</span><span class="token punctuation">,</span>                changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'^/backend'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can modify the target to any valid backend endpoint.</p><br><h3 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h3><h4 id="HelloWorld-vue"><a href="#HelloWorld-vue" class="headerlink" title="HelloWorld.vue"></a>HelloWorld.vue</h4><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>template<span class="token operator">></span>  <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>img      v<span class="token operator">-</span><span class="token keyword">if</span><span class="token operator">=</span><span class="token string">"image"</span>      <span class="token punctuation">:</span>src<span class="token operator">=</span><span class="token string">"image"</span>      width<span class="token operator">=</span><span class="token string">"400px"</span>      height<span class="token operator">=</span><span class="token string">"300px"</span>      alt<span class="token operator">=</span><span class="token string">"x"</span>    <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> io <span class="token keyword">from</span> <span class="token string">'socket.io-client'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>     socket<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>     image<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">beforeDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">connectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket <span class="token operator">=</span> <span class="token function">io</span><span class="token punctuation">(</span><span class="token string">'/message'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>path<span class="token punctuation">:</span> <span class="token string">'/backend/socket.io'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">receiveMessage</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">disconnectWebsocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">emit</span><span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>socket<span class="token punctuation">.</span><span class="token function">disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">receiveMessage</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>image <span class="token operator">=</span> <span class="token string">"data:image/jpg;base64,"</span> <span class="token operator">+</span> data<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="vue-config-js"><a href="#vue-config-js" class="headerlink" title="vue.config.js"></a>vue.config.js</h4><pre class="line-numbers language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>        proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token string">'^/backend'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                target<span class="token punctuation">:</span> <span class="token string">'http://127.0.0.1:5000/backend'</span><span class="token punctuation">,</span>                changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">'^/backend'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Flask-SocketIO"><a href="#Flask-SocketIO" class="headerlink" title="Flask-SocketIO"></a>Flask-SocketIO</h2><p>The frontend is now ready for streaming. Let’s start working on the backend side.</p><br><h3 id="Overview-1"><a href="#Overview-1" class="headerlink" title="Overview"></a>Overview</h3><p>The Backend job is to send images to the frontend in a fixed time interval.</p><br><h3 id="Installation-1"><a href="#Installation-1" class="headerlink" title="Installation"></a>Installation</h3><p>Frist we set up the project files</p><pre><code>$ mkdir websocket-backend$ cd websocket-backend/$ touch app.py requirements.txt</code></pre><br><p>In the requirements.txt file we specify the packages</p><pre><code>Flask==1.1.2Flask_SocketIO==4.3.0apscheduler===3.6.3</code></pre><p>Then install all of them</p><pre><code>pip install -r requirements.txt</code></pre><br><p>Open app.py and use the following structure copied from Flask-SocketIO documentation</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_socketio <span class="token keyword">import</span> SocketIOapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'secret!'</span>io <span class="token operator">=</span> SocketIO<span class="token punctuation">(</span>app<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'/backend/socket.io'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notice here we specify the path to match the path in the frontend side.</p><br><p>Add some basic WebSocket functions</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_socketio <span class="token keyword">import</span> SocketIOapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'secret!'</span>io <span class="token operator">=</span> SocketIO<span class="token punctuation">(</span>app<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'/backend/socket.io'</span><span class="token punctuation">)</span>@io<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Frontend] Connected with WebSocket'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token string">'Connected'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@io<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message_disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Frontend] Disconnected with WebSocket'</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You might notice that the namespace here corresponds to the URI in Vue.js code.</p><br><h3 id="Initial-Test"><a href="#Initial-Test" class="headerlink" title="Initial Test"></a>Initial Test</h3><p>Now we can test our code by running the Flask app first and then the Vue.js app.</p><pre><code>$ python app.py$ npm run serve</code></pre><p>Then access the link <a href="http://localhost:8080/" target="_blank" rel="noopener">http://localhost:8080/</a> and we should see the following logs in our backend console</p><pre><code>[Frontend] Connected with WebSocket</code></pre><p>Great! We verify that frontend and backend are connected to each other.</p><br><h3 id="Create-Task-Schedulers-By-apscheduler"><a href="#Create-Task-Schedulers-By-apscheduler" class="headerlink" title="Create Task Schedulers By apscheduler"></a>Create Task Schedulers By apscheduler</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> atexit<span class="token keyword">from</span> apscheduler<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>background <span class="token keyword">import</span> BackgroundScheduler<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">send_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token string">'test'</span><span class="token punctuation">}</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># init scheduler for regular jobs</span>scheduler <span class="token operator">=</span> BackgroundScheduler<span class="token punctuation">(</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>func<span class="token operator">=</span>send_images<span class="token punctuation">,</span> trigger<span class="token operator">=</span><span class="token string">'interval'</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># shut down the scheduler when exiting the app</span>atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Here we create a task scheduler for sending images per second. If you are using Chrome, open the browser and press F12 to open the developer console. You can see the frontend is receiving  the exact data sent from backend.</p><br><h3 id="Send-Real-Images"><a href="#Send-Real-Images" class="headerlink" title="Send Real Images"></a>Send Real Images</h3><p>First download two images from <a href="https://unsplash.com/" target="_blank" rel="noopener">https://unsplash.com/</a>. I download these two images</p><ul><li>(<a href="https://images.unsplash.com/photo-1560421683-2587f1591d30?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1191&amp;q=80" target="_blank" rel="noopener">https://images.unsplash.com/photo-1560421683-2587f1591d30?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1191&amp;q=80</a>)</li><li>(<a href="https://images.unsplash.com/photo-1508804185872-d7badad00f7d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80" target="_blank" rel="noopener">https://images.unsplash.com/photo-1508804185872-d7badad00f7d?ixlib=rb-1.2.1&amp;ixid=eyJhcHBfaWQiOjEyMDd9&amp;auto=format&amp;fit=crop&amp;w=1050&amp;q=80</a>)</li></ul><p>and save the first one as 1.jpg and the second one as 2.jpg in my backend folder.</p><br><p>We need to add some logic to read those image files from disk and covert them to base64 strings.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> time<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">def</span> <span class="token function">img_file_to_base64</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> image_file<span class="token punctuation">:</span>        base64_bytes <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>image_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> img_no <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base64_str <span class="token operator">=</span> img_file_to_base64<span class="token punctuation">(</span>f<span class="token string">'{img_no}.jpg'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span> base64_str<span class="token punctuation">}</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><p>Now we are done. You can see the frontend is receiving images repeatedly!</p><br><h3 id="Final-Code-1"><a href="#Final-Code-1" class="headerlink" title="Final Code"></a>Final Code</h3><h4 id="app-py"><a href="#app-py" class="headerlink" title="app.py"></a>app.py</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> atexit<span class="token keyword">import</span> base64<span class="token keyword">import</span> time<span class="token keyword">from</span> apscheduler<span class="token punctuation">.</span>schedulers<span class="token punctuation">.</span>background <span class="token keyword">import</span> BackgroundScheduler<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask_socketio <span class="token keyword">import</span> SocketIOapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'secret!'</span>io <span class="token operator">=</span> SocketIO<span class="token punctuation">(</span>app<span class="token punctuation">,</span> path<span class="token operator">=</span><span class="token string">'/backend/socket.io'</span><span class="token punctuation">)</span>@io<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">'connect'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message_connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Frontend] Connected with WebSocket'</span><span class="token punctuation">)</span>    io<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span> <span class="token string">'Connected'</span><span class="token punctuation">}</span><span class="token punctuation">)</span>@io<span class="token punctuation">.</span>on<span class="token punctuation">(</span><span class="token string">'disconnect'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">message_disconnect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[Frontend] Disconnected with WebSocket'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">img_file_to_base64</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> image_file<span class="token punctuation">:</span>        base64_bytes <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>image_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_bytes<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_images</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> img_no <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base64_str <span class="token operator">=</span> img_file_to_base64<span class="token punctuation">(</span>f<span class="token string">'{img_no}.jpg'</span><span class="token punctuation">)</span>        io<span class="token punctuation">.</span>emit<span class="token punctuation">(</span><span class="token string">'image_stream'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">'data'</span><span class="token punctuation">:</span> base64_str<span class="token punctuation">}</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">'/message'</span><span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># init scheduler for regular jobs</span>scheduler <span class="token operator">=</span> BackgroundScheduler<span class="token punctuation">(</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>add_job<span class="token punctuation">(</span>func<span class="token operator">=</span>send_images<span class="token punctuation">,</span> trigger<span class="token operator">=</span><span class="token string">'interval'</span><span class="token punctuation">,</span> seconds<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>scheduler<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># shut down the scheduler when exiting the app</span>atexit<span class="token punctuation">.</span>register<span class="token punctuation">(</span><span class="token keyword">lambda</span><span class="token punctuation">:</span> scheduler<span class="token punctuation">.</span>shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    io<span class="token punctuation">.</span>run<span class="token punctuation">(</span>app<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><h4 id="requirements-txt"><a href="#requirements-txt" class="headerlink" title="requirements.txt"></a>requirements.txt</h4><pre><code>Flask==1.1.2Flask_SocketIO==4.3.0apscheduler==3.6.3</code></pre>]]></content>
      
      
      <categories>
          
          <category> Full Stack Development </category>
          
          <category> WebSocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> WebSocket </tag>
            
            <tag> streaming </tag>
            
            <tag> Vue.js </tag>
            
            <tag> Flask </tag>
            
            <tag> Flask-SocketIO </tag>
            
            <tag> base64 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Automate SFTP Transfer By Python</title>
      <link href="/2020/06/04/automate-sftp-transfer-by-python/"/>
      <url>/2020/06/04/automate-sftp-transfer-by-python/</url>
      
        <content type="html"><![CDATA[<h1 id="Automate-SFTP-Transfer-By-Python"><a href="#Automate-SFTP-Transfer-By-Python" class="headerlink" title="Automate SFTP Transfer By Python"></a>Automate SFTP Transfer By Python</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Transferring files to a Linux host server could be a pain if you have to do that many times. For example, you have to deploy and test your new code in the server many times. I did some research online and found a solution that can automate such process by the paramiko package.</p><br><p>The following code snippets can be used to transfer any files or directories to a SFTP server.</p><h2 id="Python-Environment"><a href="#Python-Environment" class="headerlink" title="Python Environment"></a>Python Environment</h2><p>Python 3.7.7 + paramiko</p><pre><code>pip install paramiko</code></pre><h2 id="All-You-Need"><a href="#All-You-Need" class="headerlink" title="All You Need"></a>All You Need</h2><p>All the code that you need to transfer file(s) or a directory to a SFTP server. </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> paramiko<span class="token keyword">import</span> glob<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">MySFTPClient</span><span class="token punctuation">(</span>paramiko<span class="token punctuation">.</span>SFTPClient<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">put_dir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> source<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Uploads the contents of the source directory to the target path. The            target directory needs to exists. All subdirectories in source are             created under target.        """</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>source<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>put<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>source<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">'{target}/{item}'</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>f<span class="token string">'{target}/{item}'</span><span class="token punctuation">,</span> ignore_existing<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>put_dir<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>source<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">,</span> f<span class="token string">'{target}/{item}'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">mkdir</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> path<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token number">511</span><span class="token punctuation">,</span> ignore_existing<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">""" Augments mkdir by adding an option to not fail if the folder exists  """</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            super<span class="token punctuation">(</span>MySFTPClient<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>path<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>        <span class="token keyword">except</span> IOError<span class="token punctuation">:</span>            <span class="token keyword">if</span> ignore_existing<span class="token punctuation">:</span>                <span class="token keyword">pass</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span><span class="token keyword">def</span> <span class="token function">upload_files</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> ftp_dir<span class="token punctuation">,</span> local_dir<span class="token punctuation">,</span> file_names<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Open a transport</span>    transport <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Auth</span>    transport<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>None<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Go</span>    sftp <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>SFTPClient<span class="token punctuation">.</span>from_transport<span class="token punctuation">(</span>transport<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Upload</span>    <span class="token keyword">for</span> file_name <span class="token keyword">in</span> file_names<span class="token punctuation">:</span>        filepath <span class="token operator">=</span> f<span class="token string">'{ftp_dir}{file_name}'</span>        localpath <span class="token operator">=</span> f<span class="token string">'{local_dir}{file_name}'</span>        sftp<span class="token punctuation">.</span>put<span class="token punctuation">(</span>localpath<span class="token punctuation">,</span> filepath<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Close</span>    <span class="token keyword">if</span> sftp<span class="token punctuation">:</span>         sftp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> transport<span class="token punctuation">:</span>         transport<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_dir</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> ftp_dir<span class="token punctuation">,</span> local_dir<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># Open a transport</span>    transport <span class="token operator">=</span> paramiko<span class="token punctuation">.</span>Transport<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Auth    </span>    transport<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>None<span class="token punctuation">,</span> user_name<span class="token punctuation">,</span> password<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Go!    </span>    sftp <span class="token operator">=</span> MySFTPClient<span class="token punctuation">.</span>from_transport<span class="token punctuation">(</span>transport<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Upload</span>    sftp<span class="token punctuation">.</span>put_dir<span class="token punctuation">(</span>local_dir<span class="token punctuation">,</span> ftp_dir<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Close</span>    <span class="token keyword">if</span> sftp<span class="token punctuation">:</span>         sftp<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> transport<span class="token punctuation">:</span>         transport<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    file_names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'app.py'</span><span class="token punctuation">,</span> <span class="token string">'requirements.txt'</span><span class="token punctuation">]</span>    upload_files<span class="token punctuation">(</span><span class="token string">'88.88.88.88'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'/home/backend/'</span><span class="token punctuation">,</span>                 'C<span class="token punctuation">:</span>\\Users\\YourName\\Desktop\\backend\'<span class="token punctuation">,</span>                  file_names<span class="token punctuation">,</span> <span class="token string">'UserName'</span><span class="token punctuation">,</span> <span class="token string">'Passsword'</span><span class="token punctuation">)</span>    upload_dir<span class="token punctuation">(</span><span class="token string">'88.88.88.88'</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">'/home/backend/models'</span><span class="token punctuation">,</span>               <span class="token string">'C:\\Users\\YourName\\Desktop\\backend\\models'</span><span class="token punctuation">,</span>              <span class="token string">'UserName'</span><span class="token punctuation">,</span> <span class="token string">'Passsword'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h2><p>When transferring files, ‘/‘ or ‘\\\\’ should always be added at the end while neither of them should be added when transferring directories.</p>]]></content>
      
      
      <categories>
          
          <category> Scripts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> SFTP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
